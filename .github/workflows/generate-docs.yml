name: Generate GitHub Actions Documentation

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'readme.md'
      - '.github/workflows/generate-docs.yml'
  pull_request:
    branches: [ main, master ]
    paths: 
      - 'readme.md'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install tree command
      run: sudo apt-get update && sudo apt-get install -y tree

    - name: Get repository info
      id: repo-info
      run: |
        echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV
        echo "REPO_DESCRIPTION=$(curl -s https://api.github.com/repos/${{ github.repository }} | jq -r '.description // "GitHub Actions Documentation"')" >> $GITHUB_ENV
        echo "REPO_HOMEPAGE=$(curl -s https://api.github.com/repos/${{ github.repository }} | jq -r '.homepage // "GitHub Actions Documentation"')" >> $GITHUB_ENV
      
    - name: Create docs directory structure
      run: |
        mv readme.md .readme.md
        rm -rf *
        mv .readme.md readme.md
        mkdir -p src
        mkdir -p dist

    - name: Create package.json
      run: |
        cat > package.json << 'EOF'
        {
          "name": "github-actions-docs-generator",
          "version": "1.0.0",
          "scripts": {
            "build": "tailwindcss -i ./src/input.css -o ./dist/output.css --minify",
            "dev": "tailwindcss -i ./src/input.css -o ./dist/output.css --watch"
          },
          "devDependencies": {
            "tailwindcss": "^3.4.17",
            "@tailwindcss/typography": "^0.5.10"
          }
        }
        EOF

    - name: Create Tailwind config
      run: |
        cat > tailwind.config.js << 'EOF'
        /** @type {import('tailwindcss').Config} */
        module.exports = {
          darkMode: 'class',
          content: ["./dist/*.html"],
          theme: {
            extend: {
              fontFamily: {
                'sans': ['Fira Code', 'monospace'],
                'mono': ['JetBrains Mono', 'Fira Code', 'monospace'],
              },
              colors: {
                'cyber': {
                  50: '#ecfdf5',
                  100: '#d1fae5',
                  200: '#a7f3d0',
                  300: '#6ee7b7',
                  400: '#34d399',
                  500: '#10b981',
                  600: '#059669',
                  700: '#047857',
                  800: '#065f46',
                  900: '#064e3b',
                },
                'neon': {
                  400: '#f0abfc',
                  500: '#e879f9',
                  600: '#d946ef',
                },
                'hacker': {
                  dark: '#0d1117',
                  light: '#161b22',
                  accent: '#238636',
                  text: '#00ff00',
                }
              },
              animation: {
                'terminal-cursor': 'blink 1s step-end infinite',
                'glitch': 'glitch 1s ease-in-out infinite',
                'float': 'float 6s ease-in-out infinite',
                'matrix-text': 'matrix 20s linear infinite',
                'typing': 'typing 3.5s steps(40, end), blink-caret .75s step-end infinite',
              },
              keyframes: {
                blink: {
                  '0%, 100%': { opacity: '1' },
                  '50%': { opacity: '0' },
                },
                glitch: {
                  '0%, 100%': { transform: 'translate(0)' },
                  '20%': { transform: 'translate(-5px, 5px)' },
                  '40%': { transform: 'translate(-5px, -5px)' },
                  '60%': { transform: 'translate(5px, 5px)' },
                  '80%': { transform: 'translate(5px, -5px)' },
                },
                float: {
                  '0%, 100%': { transform: 'translateY(0px)' },
                  '50%': { transform: 'translateY(-20px)' },
                },
                matrix: {
                  '0%': { transform: 'translateY(0)' },
                  '100%': { transform: 'translateY(-10000px)' },
                },
                typing: {
                  'from': { width: '0' },
                  'to': { width: '100%' },
                },
                'blink-caret': {
                  'from, to': { borderColor: 'transparent' },
                  '50%': { borderColor: '#00ff00' },
                }
              },
              textShadow: {
                'neon': '0 0 5px #fff, 0 0 10px #fff, 0 0 15px #0073e6, 0 0 20px #0073e6, 0 0 25px #0073e6',
                'cyber': '0 0 5px #00ff00, 0 0 10px #00ff00',
              },
              backgroundImage: {
                'matrix': 'url("data:image/svg+xml,%3Csvg width=\'100%25\' height=\'100%25\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cdefs%3E%3Cpattern id=\'matrix\' patternUnits=\'userSpaceOnUse\' width=\'20\' height=\'20\' patternTransform=\'scale(2) rotate(0)\'%3E%3Ctext x=\'0\' y=\'15\' font-family=\'monospace\' font-size=\'10\' fill=\'%2300ff0022\'%3E1%3C/text%3E%3Ctext x=\'10\' y=\'15\' font-family=\'monospace\' font-size=\'10\' fill=\'%2300ff0011\'%3E0%3C/text%3E%3C/pattern%3E%3C/defs%3E%3Crect width=\'100%25\' height=\'100%25\' fill=\'url(%23matrix)\'/%3E%3C/svg%3E")',
              }
            },
          },
          plugins: [
            require('@tailwindcss/typography'),
            function({ addUtilities }) {
              const newUtilities = {
                '.text-shadow-neon': {
                  textShadow: '0 0 5px #fff, 0 0 10px #fff, 0 0 15px #0073e6, 0 0 20px #0073e6, 0 0 25px #0073e6',
                },
                '.text-shadow-cyber': {
                  textShadow: '0 0 5px #00ff00, 0 0 10px #00ff00',
                },
                '.terminal-text': {
                  fontFamily: 'monospace',
                  color: '#00ff00',
                  backgroundColor: '#0d1117',
                  padding: '1rem',
                  borderRadius: '0.5rem',
                  border: '1px solid #30363d',
                },
                '.glitch': {
                  position: 'relative',
                },
                '.glitch::before': {
                  content: 'attr(data-text)',
                  position: 'absolute',
                  top: '0',
                  left: '2px',
                  width: '100%',
                  height: '100%',
                  textShadow: '-2px 0 #ff00ff',
                  animation: 'glitch 0.3s infinite',
                  clipPath: 'polygon(0 0, 100% 0, 100% 45%, 0 45%)',
                },
                '.glitch::after': {
                  content: 'attr(data-text)',
                  position: 'absolute',
                  top: '0',
                  left: '-2px',
                  width: '100%',
                  height: '100%',
                  textShadow: '2px 0 #00ffff',
                  animation: 'glitch 0.3s infinite reverse',
                  clipPath: 'polygon(0 55%, 100% 55%, 100% 100%, 0 100%)',
                },
              }
              addUtilities(newUtilities)
            },
          ],
        }
        EOF

    - name: Create Tailwind input CSS
      run: |
        cat > src/input.css << 'EOF'
        @tailwind base;
        @tailwind components;
        @tailwind utilities;

        @import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');

        @layer base {
          html {
            scroll-behavior: smooth;
          }
          
          body {
            @apply bg-hacker-dark text-gray-300 font-mono;
          }

          ::-webkit-scrollbar {
            width: 0.5rem;
          }
          
          ::-webkit-scrollbar-track {
            background-color: #0d1117;
          }
          
          ::-webkit-scrollbar-thumb {
            background-color: #238636;
            border-radius: 9999px;
          }
        }

        @layer components {
          .terminal-card {
            @apply bg-hacker-light border border-gray-700 rounded-md shadow-lg overflow-hidden;
          }
          
          .terminal-header {
            @apply flex items-center gap-2 px-4 py-2 bg-gray-800 border-b border-gray-700;
          }
          
          .terminal-circle {
            @apply w-3 h-3 rounded-full;
          }
          
          .cyber-btn {
            @apply relative inline-flex items-center justify-center px-6 py-3 overflow-hidden font-mono font-medium tracking-tighter text-white bg-gray-800 rounded-md transition-all duration-300 hover:-translate-y-1 hover:shadow-lg;
          }
          
          .cyber-btn:before {
            content: '';
            @apply absolute w-full h-full bg-gradient-to-br from-cyber-500 to-neon-500 left-0 top-0 opacity-30 transition-all duration-500 ease-in-out scale-x-0 origin-top;
          }
          
          .cyber-btn:hover:before {
            @apply scale-x-100;
          }
          
          .cyber-btn:after {
            content: '';
            @apply absolute w-full h-full bg-gradient-to-br from-cyber-500 to-neon-500 left-0 top-0 opacity-30 transition-all duration-500 ease-in-out scale-x-0 origin-bottom;
          }
          
          .cyber-btn:hover:after {
            @apply scale-x-100;
          }
          
          .cyber-btn span {
            @apply relative z-10;
          }

          .matrix-bg {
            @apply relative overflow-hidden;
          }
          
          .matrix-bg:before {
            content: '';
            @apply absolute inset-0 bg-matrix opacity-5;
          }

          .typing-container {
            @apply inline-block;
          }
          
          .typing-text {
            @apply overflow-hidden whitespace-nowrap border-r-4 border-hacker-text pr-1;
            animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
          }
        }
        EOF

    - name: Install dependencies
      run: npm install

    - name: Convert README to HTML and create documentation
      run: |
        # Install markdown processor
        npm install -g marked highlight.js

        # Read README content
        README_CONTENT=$(cat readme.md)
        
        # Convert README to HTML
        echo "$README_CONTENT" | marked > readme_content.html

        # Create main HTML file
        cat > dist/index.html << EOF
        <!DOCTYPE html>
        <html lang="en" class="scroll-smooth">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${REPO_NAME} - Documentation</title>
            <meta name="description" content="${REPO_DESCRIPTION}">
            <link href="./output.css" rel="stylesheet">
            <link rel="stylesheet" href="https://cdn.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css">
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
            <script>
                // Theme toggle functionality
                function toggleTheme() {
                    const html = document.documentElement;
                    const isDark = html.classList.contains('dark');
                    
                    if (isDark) {
                        html.classList.remove('dark');
                        localStorage.setItem('theme', 'light');
                    } else {
                        html.classList.add('dark');
                        localStorage.setItem('theme', 'dark');
                    }
                }

                // Initialize theme
                function initTheme() {
                    // Always use dark theme for hacker aesthetic
                    document.documentElement.classList.add('dark');
                }

                // Matrix rain effect
                function createMatrixRain() {
                    const canvas = document.getElementById('matrix-canvas');
                    const ctx = canvas.getContext('2d');

                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;

                    const chars = '01';
                    const fontSize = 14;
                    const columns = canvas.width / fontSize;
                    
                    const drops = [];
                    for (let i = 0; i < columns; i++) {
                        drops[i] = Math.floor(Math.random() * -100);
                    }

                    function draw() {
                        ctx.fillStyle = 'rgba(13, 17, 23, 0.05)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        
                        ctx.fillStyle = '#00ff0022';
                        ctx.font = fontSize + 'px monospace';
                        
                        for (let i = 0; i < drops.length; i++) {
                            const text = chars[Math.floor(Math.random() * chars.length)];
                            ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                            
                            if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                                drops[i] = 0;
                            }
                            
                            drops[i]++;
                        }
                    }

                    setInterval(draw, 33);
                }

                // Initialize on load
                document.addEventListener('DOMContentLoaded', function() {
                    initTheme();
                    hljs.highlightAll();
                    createMatrixRain();
                    
                    // Add smooth scrolling to navigation links
                    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                        anchor.addEventListener('click', function (e) {
                            e.preventDefault();
                            const target = document.querySelector(this.getAttribute('href'));
                            if (target) {
                                target.scrollIntoView({
                                    behavior: 'smooth',
                                    block: 'start'
                                });
                            }
                        });
                    });

                    // Typing effect for the subtitle
                    const subtitle = document.getElementById('subtitle');
                    if (subtitle) {
                        const text = subtitle.textContent;
                        subtitle.innerHTML = '';
                        subtitle.classList.add('typing-container');
                        
                        const typingElement = document.createElement('span');
                        typingElement.classList.add('typing-text');
                        typingElement.textContent = text;
                        
                        subtitle.appendChild(typingElement);
                    }
                });

                // Resize matrix canvas on window resize
                window.addEventListener('resize', function() {
                    const canvas = document.getElementById('matrix-canvas');
                    if (canvas) {
                        canvas.width = window.innerWidth;
                        canvas.height = window.innerHeight;
                    }
                });
            </script>
        </head>
        <body class="font-mono antialiased text-gray-300 transition-colors duration-300">
            <!-- Matrix Background Canvas -->
            <canvas id="matrix-canvas" class="fixed top-0 left-0 w-full h-full -z-10"></canvas>

            <!-- Navigation -->
            <nav class="fixed top-0 left-0 right-0 z-50 terminal-card border-b border-gray-700">
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div class="flex items-center justify-between h-16">
                        <div class="flex items-center space-x-4">
                            <div class="terminal-header">
                                <div class="terminal-circle bg-red-500"></div>
                                <div class="terminal-circle bg-yellow-500"></div>
                                <div class="terminal-circle bg-green-500"></div>
                            </div>
                            <div class="flex-shrink-0">
                                <h1 class="text-lg font-bold text-shadow-cyber text-hacker-text">${REPO_NAME}</h1>
                            </div>
                        </div>
                        <div class="flex items-center space-x-4">
                            <a href="https://github.com/${GITHUB_REPOSITORY}" target="_blank" class="p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                                </svg>
                            </a>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Main Content -->
            <main class="pt-16 min-h-screen">
                <!-- Hero Section -->
                <section class="relative py-20 px-4 sm:px-6 lg:px-8 overflow-hidden">
                    <div class="relative max-w-7xl mx-auto">
                        <div class="text-center">
                            <div class="animate-float mb-8">
                                <div class="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br from-cyber-500 to-neon-600 shadow-lg">
                                    <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                                    </svg>
                                </div>
                            </div>
                            <h1 class="text-4xl font-bold text-shadow-cyber text-hacker-text mb-6" data-text="${REPO_NAME}">
                                ${REPO_NAME}
                            </h1>
                            <div class="flex flex-col sm:flex-row gap-4 justify-center">
                                <a href="#documentation" class="cyber-btn">
                                    <span>Read Documentation</span>
                                    <svg class="w-5 h-5 ml-2 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
                                    </svg>
                                </a>
                                <a href="${REPO_HOMEPAGE}" target="_blank" class="cyber-btn">
                                    <span>View Demo</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Documentation Content -->
                <section id="documentation" class="py-16 px-4 sm:px-6 lg:px-8">
                    <div class="max-w-4xl mx-auto">
                        <div class="terminal-card p-8 lg:p-12">
                            <div class="terminal-header mb-6">
                                <div class="terminal-circle bg-red-500"></div>
                                <div class="terminal-circle bg-yellow-500"></div>
                                <div class="terminal-circle bg-green-500"></div>
                                <div class="ml-2 text-sm text-gray-400">README.md</div>
                            </div>
                            <div class="prose prose-invert max-w-none prose-headings:text-cyber-400 prose-a:text-cyber-400 hover:prose-a:text-cyber-300 prose-code:bg-gray-800 prose-code:px-2 prose-code:py-1 prose-code:rounded prose-pre:bg-gray-900 prose-pre:border prose-pre:border-gray-700">
        EOF

        # Insert the converted README content
        cat readme_content.html >> dist/index.html

        # Close the HTML structure
        cat >> dist/index.html << 'EOF'
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Footer -->
                <footer class="py-12 px-4 sm:px-6 lg:px-8 border-t border-gray-800">
                    <div class="max-w-7xl mx-auto text-center">
                        <p class="text-gray-400">
                            Documentation generated automatically from README.md
                        </p>
                        <p class="text-sm text-gray-500 mt-2">
                            Last updated: <span id="last-updated" class="text-cyber-500"></span>
                        </p>
                        <div class="mt-6 flex justify-center space-x-6">
                            <a href="https://github.com/${GITHUB_REPOSITORY}" target="_blank" class="text-gray-400 hover:text-cyber-500">
                                <span class="sr-only">GitHub</span>
                                <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                                </svg>
                            </a>
                        </div>
                    </div>
                </footer>
            </main>

            <script>
                // Set last updated time
                document.getElementById('last-updated').textContent = new Date().toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            </script>
        </body>
        </html>
        EOF

    - name: Build Tailwind CSS
      run: npm run build

    - name: Checking Files Structure
      run: |
        echo "=== Project Structure ==="
        tree -a -I '.git|node_modules' .
        echo ""

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
